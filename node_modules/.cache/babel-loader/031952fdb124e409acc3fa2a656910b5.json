{"ast":null,"code":"var _jsxFileName = \"/Users/ztlab117/Desktop/Vihang/React JS/redux-toolkit-project-main/src/components/MovieDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport movieApi from \"../common/apis/movieApi\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieDetail = () => {\n  _s();\n\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(true);\n  let {\n    imdbID\n  } = useParams();\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const response = await movieApi.get(`/titles/${imdbID}`);\n        setMovie(response.data.results); // Assuming response.data contains movie details\n\n        setLoading(false);\n        console.log(movie, \"movie\");\n      } catch (error) {\n        console.error('Error fetching movie:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [imdbID]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!movie) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Movie not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'white',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: movie.titleText ? movie.titleText.text : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Release Year: \", movie.releaseYear ? movie.releaseYear.year : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Genre: \", movie.genre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Plot: \", movie.plot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Director: \", movie.director]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), \" \", movie.primaryImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: movie.primaryImage.url,\n      alt: movie.titleText ? movie.titleText.text : '',\n      style: {\n        width: '80%',\n        height: 'auto',\n        display: 'block',\n        margin: '0 auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetail, \"MUfDcyg1oZdHuDBP85i0vme7/Uw=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieDetail;\nexport default MovieDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"sources":["/Users/ztlab117/Desktop/Vihang/React JS/redux-toolkit-project-main/src/components/MovieDetail.js"],"names":["React","useState","useEffect","movieApi","useParams","MovieDetail","movie","setMovie","loading","setLoading","imdbID","fetchMovie","response","get","data","results","console","log","error","color","textAlign","titleText","text","releaseYear","year","genre","plot","director","primaryImage","url","width","height","display","margin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,MAAI;AAAES,IAAAA;AAAF,MAAaN,SAAS,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAG,YAAY;AAC3B,UAAI;AACAF,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMG,QAAQ,GAAG,MAAMT,QAAQ,CAACU,GAAT,CAAc,WAAUH,MAAO,EAA/B,CAAvB;AACAH,QAAAA,QAAQ,CAACK,QAAQ,CAACE,IAAT,CAAcC,OAAf,CAAR,CAHA,CAGiC;;AACjCN,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ,EAAkB,OAAlB;AACH,OAND,CAME,OAAOY,KAAP,EAAc;AACZF,QAAAA,OAAO,CAACE,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACAT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAXD;;AAaAE,IAAAA,UAAU;AACb,GAfQ,EAeN,CAACD,MAAD,CAfM,CAAT;;AAiBA,MAAIF,OAAJ,EAAa;AACT,wBAAO;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAI,CAACF,KAAL,EAAY;AACR,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEa,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAAZ;AAAA,4BACI;AAAA,gBAAKd,KAAK,CAACe,SAAN,GAAkBf,KAAK,CAACe,SAAN,CAAgBC,IAAlC,GAAyC;AAA9C;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,mCAAkBhB,KAAK,CAACiB,WAAN,GAAoBjB,KAAK,CAACiB,WAAN,CAAkBC,IAAtC,GAA6C,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,4BAAWlB,KAAK,CAACmB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,oBAII;AAAA,2BAAUnB,KAAK,CAACoB,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,oBAKI;AAAA,+BAAcpB,KAAK,CAACqB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,OAMKrB,KAAK,CAACsB,YAAN,iBACG;AACI,MAAA,GAAG,EAAEtB,KAAK,CAACsB,YAAN,CAAmBC,GAD5B;AAEI,MAAA,GAAG,EAAEvB,KAAK,CAACe,SAAN,GAAkBf,KAAK,CAACe,SAAN,CAAgBC,IAAlC,GAAyC,EAFlD;AAGI,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,MAAM,EAAE,MAAxB;AAAgCC,QAAAA,OAAO,EAAE,OAAzC;AAAkDC,QAAAA,MAAM,EAAE;AAA1D;AAHX;AAAA;AAAA;AAAA;AAAA,YAPR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA/CD;;GAAM5B,W;UAGeD,S;;;KAHfC,W;AAiDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movieApi from \"../common/apis/movieApi\";\nimport { useParams } from 'react-router-dom'; \n\nconst MovieDetail = () => {\n    const [movie, setMovie] = useState(null);\n    const [loading, setLoading] = useState(true);\n    let { imdbID } = useParams();\n\n    useEffect(() => {\n        const fetchMovie = async () => {\n            try {\n                setLoading(true);\n                const response = await movieApi.get(`/titles/${imdbID}`);\n                setMovie(response.data.results); // Assuming response.data contains movie details\n                setLoading(false);\n                console.log(movie,\"movie\");\n            } catch (error) {\n                console.error('Error fetching movie:', error);\n                setLoading(false);\n            }\n        };\n\n        fetchMovie();\n    }, [imdbID]);\n\n    if (loading) {\n        return <div className=\"spinner\"></div>;\n    }\n\n    if (!movie) {\n        return <div>Movie not found</div>;\n    }\n\n    return (\n        <div style={{ color: 'white', textAlign: 'center' }}>\n            <h1>{movie.titleText ? movie.titleText.text : ''}</h1>\n            <p>Release Year: {movie.releaseYear ? movie.releaseYear.year : ''}</p>\n            <p>Genre: {movie.genre}</p> {/* Assuming `genre` is available in `movie` */}\n            <p>Plot: {movie.plot}</p> {/* Assuming `plot` is available in `movie` */}\n            <p>Director: {movie.director}</p> {/* Assuming `director` is available in `movie` */}\n            {movie.primaryImage && (\n                <img \n                    src={movie.primaryImage.url} \n                    alt={movie.titleText ? movie.titleText.text : ''} \n                    style={{ width: '80%', height: 'auto', display: 'block', margin: '0 auto' }}\n                />\n            )}\n            {/* Add more details as needed */}\n        </div>\n    );\n}\n\nexport default MovieDetail;\n"]},"metadata":{},"sourceType":"module"}