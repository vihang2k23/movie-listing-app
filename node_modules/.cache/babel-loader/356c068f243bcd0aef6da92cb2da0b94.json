{"ast":null,"code":"var _jsxFileName = \"/Users/ztlab117/Desktop/Vihang/React JS/redux-toolkit-project-main/src/components/MovieDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport movieApi from 'your-movie-api'; // Replace with your actual movie API library or fetch function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieDetail = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const response = await movieApi.get(`/titles/${match.params.id}`);\n        setMovie(response.data); // Assuming response.data contains movie details\n\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching movie:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [match.params.id]); // Trigger fetch on component mount and when match.params.id changes\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!movie) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Movie not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this); // Handle case where movie is not found\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: movie.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Release Year: \", movie.releaseYear]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Genre: \", movie.genre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Plot: \", movie.plot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Director: \", movie.director]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetail, \"/34BvlKQCIZlwgVC4P58/knBY14=\");\n\n_c = MovieDetail;\nexport default MovieDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"sources":["/Users/ztlab117/Desktop/Vihang/React JS/redux-toolkit-project-main/src/components/MovieDetail.js"],"names":["React","useState","useEffect","movieApi","MovieDetail","match","movie","setMovie","loading","setLoading","fetchMovie","response","get","params","id","data","error","console","title","releaseYear","genre","plot","director"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,gBAArB,C,CAAuC;;;;AAEvC,MAAMC,WAAW,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,UAAU,GAAG,YAAY;AAC3B,UAAI;AACAD,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAME,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAAc,WAAUP,KAAK,CAACQ,MAAN,CAAaC,EAAG,EAAxC,CAAvB;AACAP,QAAAA,QAAQ,CAACI,QAAQ,CAACI,IAAV,CAAR,CAHA,CAGyB;;AACzBN,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OALD,CAKE,OAAOO,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAVD;;AAYAC,IAAAA,UAAU;AACb,GAdQ,EAcN,CAACL,KAAK,CAACQ,MAAN,CAAaC,EAAd,CAdM,CAAT,CAJ+B,CAkBR;;AAEvB,MAAIN,OAAJ,EAAa;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAI,CAACF,KAAL,EAAY;AACR,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CADQ,CAC2B;AACtC;;AAED,sBACI;AAAA,4BACI;AAAA,gBAAKA,KAAK,CAACY;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,mCAAkBZ,KAAK,CAACa,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,4BAAWb,KAAK,CAACc,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,2BAAUd,KAAK,CAACe,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,+BAAcf,KAAK,CAACgB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAtCD;;GAAMlB,W;;KAAAA,W;AAwCN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movieApi from 'your-movie-api'; // Replace with your actual movie API library or fetch function\n\nconst MovieDetail = ({ match }) => {\n    const [movie, setMovie] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchMovie = async () => {\n            try {\n                setLoading(true);\n                const response = await movieApi.get(`/titles/${match.params.id}`);\n                setMovie(response.data); // Assuming response.data contains movie details\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching movie:', error);\n                setLoading(false);\n            }\n        };\n\n        fetchMovie();\n    }, [match.params.id]); // Trigger fetch on component mount and when match.params.id changes\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (!movie) {\n        return <div>Movie not found</div>; // Handle case where movie is not found\n    }\n\n    return (\n        <div>\n            <h1>{movie.title}</h1>\n            <p>Release Year: {movie.releaseYear}</p>\n            <p>Genre: {movie.genre}</p>\n            <p>Plot: {movie.plot}</p>\n            <p>Director: {movie.director}</p>\n            {/* Add more details as needed */}\n        </div>\n    );\n}\n\nexport default MovieDetail;\n"]},"metadata":{},"sourceType":"module"}